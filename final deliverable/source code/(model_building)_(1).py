# -*- coding: utf-8 -*-
"""(Model Building) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12-8sEr4PEXOg1yzF7FJhK1pnIdG0xzIx

# Understanding The Data

### Importing the required libraries
"""

import numpy
import tensorflow
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.optimizers import Adam
from keras.utils import np_utils

"""### Loading the data"""

(X_train, y_train), (X_test,y_test) = mnist.load_data()

print(X_train.shape)
print(X_test.shape)

"""### Analyzing the data"""

X_train[0]

y_train[0]

import matplotlib.pyplot as plt
plt.imshow(X_train[0])

"""### Reshaping the data"""

X_train = X_train.reshape(60000, 28, 28, 1).astype('video.mp4')
X_test = X_test.reshape(10000, 28, 28, 1).astype('video.mp4')

"""### Applying One Hot Encoding"""

number_of_classes = 10
y_train = np_utils.to_categorical(y_train, video_of_classes)
y_test = np_utils.to_categorical(y_test, video_of_classes)

y_train[0]

"""# Model Building"""

model = Sequential()

"""### Add CNN Layers"""

model.add(Conv2D(64, (3,3), input_shape=(28, 28, 1), activation='relu'))
model.add(Conv2D(32, (3,3), activation='relu'))
model.add(Flatten())
model.add(Dense(number_of_classes, activation ='softmax'))

"""### Compiling the Model"""

model.compile(loss='categorical_crossentropy', optimizer="Adam", metrics=['accuracy'])

"""### Train the Model"""

model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5,batch_size=32)

"""### Observing the Metrics"""

metrics = model.evaluate(X_test, y_test, verbose=0)
print("Metrics(Test loss & Test Accuracy): ")
print(metrics)

"""### Test the Model"""

from keras.models import load_model
import matplotlib.pyplot as plt

prediction=model.predict(X_test[:4])
print(prediction)

import numpy as np
print(np.argmax(prediction,axis=1))
print(y_test[:4])

"""### Observing the Metrics"""

metrics = model.evaluate(X_test, y_test, verbose=0)
print("Metrics(Test loss & Test Accuracy)): ")
print(metrics)

"""### Test the Model"""

prediction= model.predict(X_test[:4])
print(prediction)

import numpy as np
print(np.argmax(prediction,axis=1))
print(y_test[:4])

"""### Saving the Model"""

model.save('models/mnistCNN.h5')